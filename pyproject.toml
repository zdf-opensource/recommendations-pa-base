[tool.poetry]
name = "pa_base"
version = "1.0.0"
description = "Base models, logic, and, abstractions for P/A components. (c) ZDF, 2023. All rights reserved."
license = "MIT" # c.f., https://python-poetry.org/docs/pyproject/#license
authors = [
    # find authors of current lines using "git-extras": git summary --line
    "Kuhn, Valentin <kuhn.v@zdf.de>",
    "Xenija Neufeld <neufeld.x@zdf.de>",
    "Netzer, Florian <netzer.f@zdf.de>",
    "Malan, Christian <malan.c@zdf.de>",
]
maintainers = ["Kuhn, Valentin <kuhn.v@zdf.de>"]
readme = "README.md"
homepage = "https://algorithmen.zdf.de/"
# repository = ""
packages = [{ include = "pa_base" }]
# include = [
#     "LICENSE",
#     "README.md",
# ]

[tool.poetry.dependencies]
python = "^3.7" # we support py37-py311
boto3 = [
    # for s3 clients in pa_base.data.s3_util
    { version = ">=1.15.18,<=1.23.10", python = "~3.6.1" },
    { version = "^1.24.74", python = "^3.7" },
]
pandas = [
    { version = "1.0.5", python = ">=3.6.1,<3.8" },
    { version = "^1.4.4", python = "^3.8" },
]
pyarrow = ">=6.0.1"
pytz = [
    # for timezone info in pa_base.configuration.config
    { version = "2022.2.1", python = "~3.6.1" },
    { version = "^2022.2.1", python = "^3.7" },
]
numpy = [
    # same python constraints as pandas to be compatible
    { version = "1.16.6", python = ">=3.6.1,<3.8" },
    { version = "^1.23.3", python = "^3.8" },
]
PyYAML = ">=5.4.1" # for dynamic config parsing in pa_base.data.s3_util
attrs = "^21.3" # required for modern @define syntax
redis = { version = "^4.0.2", optional = true, extras = ["hiredis"] }
cachetools = "^4.0.0"
flask = [
    # for structured logging of the request context
    { version = ">=1.0.2,<2.1.0", python = "~3.6.1", optional = true },
    { version = ">=1.0.2", python = "^3.7", optional = true },
]
python-json-logger = [
    # for structured logging
    { version = "0.1.11", python = "~3.6.1", optional = true },
    { version = ">=0.1.11", python = "^3.7", optional = true },
]
# sentence transformer: embeddings in pinecone
pinecone-client = { version = "^2.0.13", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "~7.0"
pre-commit = "2.11"
pytest-mock = "2.0.0"
flaky = "3.7.0"
python-dotenv = [
    { version = "0.20.0", python = "~3.6.1", extras = [
        "cli",
    ] },
    { version = "^0.21.0", python = "^3.7", extras = [
        "cli",
    ] },
]

[tool.poetry.extras]
redis = ["redis"]
pinecone = ["pinecone-client"]
flask = ["flask"]
jsonlogging = ["python-json-logger"]
all = ["redis", "pinecone-client", "python-json-logger", "flask"]

[build-system]
# build: poetry build
# install: pip install dist/pa_base-0.1.0-py3-none-any.whl --upgrade --no-deps
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py37", "py38", "py39", "py310", "py311"]

[tool.isort]
profile = "black"
filter_files = true
known_first_party = ["pa_base"]

[tool.pylint.main]
disable = ["all"]
enable = ["E"]
extension-pkg-allow-list = "pydantic"
jobs = 0

[tool.pytest.ini_options]
# pytests supports pyproject.toml since 6.0
# minversion = "6.0"
addopts = "--no-success-flaky-report" # --force-flaky --max-runs=3"
testpaths = ["tests"]
# configuration if we decide to use pytest-dotenv, c.f., https://github.com/quiqua/pytest-dotenv
#   already implemented similar functionality using only python-dotenv without pytest-dotenv
# env_files = [".env"]
